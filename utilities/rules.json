{
  "rules": [
    "DepositPoint",
    "DepositPointType",
    "DepositPointIsle",
    "SortingType",
    "Transaction",
    "Vehicle",
    "VehicleType",
    "Waste",
    "WasteCategory",
    "Route",
    "TargetGroup",
    "WasteManagmentStage"
  ],

  "Waste": {
    "id": "Mandatory:Text, Unique identifier. Example 'waste:6'",
    "family": "Mandatory:Text, Fixed to 'Resource'",
    "type": "Mandatory:Text, Resource type. In this case fixed to 'Waste'",
    "name": "Mandatory:Text, Waste Name. Example 'Green glass bottle'",
    "description": "Optional:Text, Waste description. Example 'Bottle made of green glass'",
    "refCategory": "Mandatory:Text, Reference to category entity this belongs. Example [wastecategory:9]",
    "definitionSource": "Optional:Text, Where this characterization comes from",
    "wasteCode": "Optional:Text, LER waste code.",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "WasteCategory": {
    "id": "Mandatory:Text, Unique identifier. Example 'wastecategory:9'",
    "family": "Mandatory:Text, Fixed to 'ResourceCategory'",
    "type": "Mandatory:Text, Resource category type. In this case fixed to 'WasteCategory'",
    "name": "Mandatory:Text, WasteCategory Name. Example 'Glass bottles'",
    "description": "Optional:Text, WasteCategory description. Example 'Glass bottles including whiteand green glass'",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "SortingType": {
    "id": "Mandatory:Text, Unique identifier. Example 'sortingtype:12a'",
    "family": "Mandatory:Text, Entity Type. In this case fixed to 'ResourceCollection'",
    "type": "Mandatory:Text, Resource collection subtype. In this case fxed to 'SortingType'",
    "name": "Mandatory:Text, SortingType Name. Example 'Color Glass collection'",
    "nameLocal": "Optional:Text, SortingType name in the local language.",
    "description": "Optonal:Text, SortingType description. Example 'Collection of colored glass bottles'",
    "descriptionLocal": "Optional:Text, SortingType description in the local language.",
    "regulation": "Optonal:Text, Regulation under which the SortingType is operating.",
    "refResources": "Mandatory:List<ID>, List of waste entities composing the SortingType. Example [waste:6, waste18]",
    "shape": "Optional:Text, If the shape of the container is very relevant or representative for the sorting type (mainly for the sorting game) specify the shape of the container. Accepted values: the shapes provided by the sorting game.",
    "color": "Mandatory:Text, Sorting type's associated color. Example 'Green'",
    "annotations": "Optonal:Text, Attribute reserved for annotations (incidences, remarks, etc.)",
    "areaServed": "Optonal:Text, Higher level area to which the sorting type belongs to. It can be used to define the area where the sorting type is applied, etc.",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "Transaction": {
    "id": "Mandatory:Text, Unique identifier. Example `transaction:3a`",
    "type": "Mandatory:Text, Entity Type. Fixed to `Transaction`",
    "refEmitter": "Mandatory:Text, Transaction's emitter entity containing an Agent ID.",
    "refReceiver": "Mandatory:Text, Transaction's receiver entity containing an Agent ID.",
    "refCapturer": "Optonal:Text, Reference to the Id of the Device entity if exists, that captured the transaction containing an Agent ID..",
    "date": "Mandatory:Text, Timestamp which represents when the transaction was made",
    "refTransferredResources": "Optonal:Text, List of Resource IDs transferred in this transaction.",
    "transferredLoad": "Optonal:Text, Load transferred in this transaction (Sum of all the resources transferrer = In this load amount we know that the cited resources exist but no in which percentage each)",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "Vehicle": {
    "id": "Mandatory:Text, Unique identifier. Example `wasteentity:13`",
    "type": "Mandatory:Text, Vehicle",
    "family": "Mandatory:Text, Fixed to `Agent`",
    "vehiclePlateIdentifier": "Mandatory:Text, The Vehicle Identification Number (VIN) is a unique serial number used by the automotive industry to identify individual motor vehicles.",
    "name": "Optonal:Text, ",
    "location": "Optona:GeoJSON, Vehicle's location represented by a GeoJSON Point",
    "refType": "Mandatory:Text, Reference to the VehicleType it belongs",
    "refInputs": "Optonal:Text, ",
    "refOutputs": "Optonal:Text, ",
    "owner": "Mandatory:Text, ",
    "category": "Optonal:Text, Vehicle category(ies) from an external point of view. This is different than the vehicle type (car, lorry, etc.) represented by the `vehicleType` property. (`public`, `private`, `municipalServices`, `specialUsage`,`tracked`, `nonTracked`)",
    "speed": "Optonal:Number, Denotes the magnitude of the horizontal component of the vehicle's current velocity and is specified in Kilometers per Hour. If provided, the value of the speed attribute must be a non-negative real number. `null` *MAY* be used if `speed` is transiently unknown for some reason.",
    "cargoWeight": "Optonal:Number, Current weight of the vehicle's cargo",
    "purchaseDate": "Optonal:Date, The date the item e.g. vehicle was purchased by the current owner.",
    "mileageFromOdometer": "Optonal:Number, The total distance travelled by the particular vehicle since its initial production, as read from its odometer.",
    "vehicleConfiguration": "Optonal:Text,A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'",
    "color": "Optonal:Text, Vehicle's color",
    "features": "Optonal:Text, (`gps`, `airbag`, `overspeed`, `abs`, `wifi`, `backCamera`, `proximitySensor`, `disabledRamp`, `alarm`, `internetConnection`)  or any other needed by the application.",
    "serviceProvided": "Optonal:Text, `garbageCollection`, `parksAndGardens`, `construction`, `streetLighting`, `roadSignalling`,`cargoTransport`, `urbanTransit`, `maintenance`, `streetCleaning`, `wasteContainerCleaning`, `auxiliaryServices`,`goodsSelling`,  `fairground`, `specialTransport`) or any other value needed by an specific application.",
    "vehicleSpecialUsage": "Optonal:Text, Indicates whether the vehicle is been used for special purposes, like commercial rental, driving school, or as a taxi. The legislation in many countries requires this information to be revealed when offering a car for sale. (`taxi`, `ambulance`, `police`, `fireBrigade`, `schoolTransportation`, `military`)",
    "areaServed": "Optonal:Text, Higher level area served by this vehicle. It can be used to group vehicles per responsible, district, neighbourhood, etc.",
    "serviceStatus": "Optonal:Text, Vehicle status (from the point of view of the service provided). 'parked','onRoute','broken',etc.",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "VehicleType": {
    "id": "Mandatory:Text, Unique identifier. Example `wasteentitytype:8a`",
    "type": "Mandatory:Text, Fixed to `VehicleType`",
    "family": "Mandatory:Text, Fixed to `AgentType`",
    "refInputs": "Mandatory:Text, Reference to the list of Input Resource entities. List of structured values containing entity id and a unit of estimated quantity per day.",
    "refOutputs": "Mandatory:Text, Reference to the list of Output Resource entities. List of structured values containing entity id and a unit of estimated quantity per day.",
    "name": "Mandatory:Text, Name given to the vehicle type",
    "description": "Optonal:Text, Description about the model",
    "vehicleType": "Mandatory:Text, Type of vehicle from the point of view of its characteristics. 'car','truck',etc.",
    "brandName": "Mandatory:Text, ",
    "numberOfAxes": "Optonal:Number, Number of axes the vehicle has",
    "maxCargoPerAxe": "Optonal:Number",
    "engineType": "Optonal:Text, Vehicle engine type",
    "enginePower": "Optonal:Text, ",
    "tireTypes": "Optonal:Text, ",
    "modelName": "Optonal:Text, ",
    "manufacturerName": "Optonal:Text, ",
    "vehicleModelDate": "Optonal:Date, ",
    "maxCargoWeight": "Optonal:Number, ",
    "maxCargoVolume": "Optonal:Number, ",
    "fuelDepositCapacity": "Optonal:Number, ",
    "compactingRatio": "Optonal:Number, ",
    "fuelType": "Optonal:Text, ",
    "fuelConsumption": "Optonal:Text, ",
    "height": "Optonal:Number, ",
    "width": "Optonal:Number, ",
    "depth": "Optonal:Number, ",
    "weight": "Optonal:Number, ",
    "loadType": "Optonal:Text, Back','Side', etc. loading type of the waste into the vehicle",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "DepositPoint": {
    "id":"Mandatory:Text, Unique identifier. Example depositpoint:12a",
    "type":"Mandatory:Text, Entity Type. Fixed to DepositPoint",
    "family":"Mandatory:Text, Fixed to Agent",
    "serialNumber":"Optonal:Number, Serial number of the container",
    "refSortingType":"Mandatory:Text, Reference to the sorting type entity",
    "description":"Optonal:Text, Description about the container.",
    "refType":"Mandatory:Text, Reference to the DepositPointType entity.",
    "storedWasteOrigin":"Optonal:Text, Origin of the waste stored (household, municipal, industrial, construction, hostelry, agriculture, other)",
    "location":"Mandatory:GEOJson, Container's location represented by a GeoJSON Point.",
    "address":"Optonal:Text, Civic address where the container is located.",
    "fillingLevel":"Optonal:Number, Filling level of the container (percentage, expressed in parts per one). When the container is full it must be equal to `1.0`. When the container is empty it must be equal to `0.0`. If it is not possible to determine the current filling level it must be equal to `null`.",
    "cargoWeight":"Optonal:Number, Weight of the container load.",
    "temperature":"Optonal:Number, Temperature inside the container.",
    "methaneConcentration":"Optonal:Number, Methane (CH4) concentration inside the container.",
    "regulation":"Optonal:Text, Regulation under which the container is operating.",
    "responsible":"Optonal:Text, Responsible for the container, i.e. entity in charge of actuating (emptying, collecting etc.).",
    "owner":"Optonal:Text, Container's owner.",
    "dateServiceStarted":"Optonal:Text, Date at which the container started giving service.",
    "dateLastEmptying":"Optonal:Text, Timestamp which represents when the container was emptied last time.",
    "nextActuationDeadline":"Optonal:Text, Deadline for next actuation to be performed (emptying, picking up, etc.).",
    "actuationHours":"Optonal:Text, Hours suitable for performing actuations over the container.",
    "openingHours":"Optonal:Text, Hours when the point is available.",
    "dateLastCleaning":"Optonal:Text, When the container was cleaned last time.",
    "nextCleaningDeadline":"Optonal:Text, Deadline for next cleaning.",
    "refDepositPointIsle":"Optonal:Text, Reference to DepositPointIsle where the container is placed if any.",
    "status":"Optonal:Text, Mandatory:Text, Container's status from the point of view of safety.",
    "color":"Optonal:Text, Container's color",
    "image":"Optonal:Text, URL containing a photo of the container.",
    "annotations":"Optonal:Text, Field reserved for annotations (incidences, remarks, etc.).",
    "areaServed":"Optonal:Text, Higher level area to which the container belongs to. It can be used to group containers per responsible, district, neighbourhood, etc.",
    "dateModified":"Optonal:Text, Last update timestamp of this entity",
    "refDevice":"Optonal:Text, Reference to the device(s) used to monitor this container.",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "DepositPointType": {
    "id":"Mandatory:Text, Unique identifier. Example depositpointtype:c1",
    "type":"Mandatory:Text, Entity Type. Fixed to DepositPointType",
    "family":"Mandatory:Text, Fixed to  AgentType",
    "name":"Mandatory:Text, Deposit Point Trype name",
    "refInputs":"",
    "refOutputs":"",
    "width":"Mandatory:Number, Width of the collection container, bag, etc.",
    "height":"Mandatory:Number, Height of the collection container, bag, etc.",
    "depth":"Mandatory:Number, depth of the collection container, bag, etc. ",
    "weight":"Mandatory:Number, Weight of the collection container, bag, etc. ",
    "cargoVolume":"Mandatory:Number, Total volume the point can hold. ",
    "maximumLoad":"Mandatory:Number, Maximum load the point can hold safely.",
    "recommendedLoad":"Mandatory:Number, Manufacturer recommended load for the points.",
    "category":"Mandatory:Text, Deposit Point category (`trashCan`,`bulk`,`wheelieBin`,`bag`,`fixed collection centers`,`mobile collection centers`,`underground`. Container is placed underground,`pneumatic`. Pneumatic collection boxes.,`portable`. Container can be moved around a certain extent.`fixed`. Container is fixed to a wall, support or handle.)",
    "insertHolesNumber":"Mandatory:Number, Number of insert holes the container has.",
    "insertHoleWidth":"Optonal:Number, Width of the hole or lid.",
    "insertHoleHeight":"Optonal:Number, Height of the hole or lid.",
    "loadType":"Optonal:Text, Deposit point loading type:`side`,`upper`,`front`",
    "madeOf":"Optonal:Text, Material the container is made of.",
    "madeOfCode":"Optonal:Text, Material Code as per standard tables. ",
    "brandName":"Mandatory:Text, Name of the brand.",
    "modelName":"Mandatory:Text, Name of the model.",
    "manufacturerName":"Optonal:Text, Name of the manufacturer.",
    "colors":"Optonal:List, Available colors, even if it is transparent for inside visibility.",
    "image":"Optonal:Text, URL containing a photo of the container type.",
    "compliantWith":"Optonal:List, list of standards to which the container is compliant with (ex. `UNE-EN 840-2:2013`)",
    "accessLimitation":"Optonal:Text, Access limitation type to the container type. Example lock",
    "userIdentification":"Optonal:Text, User identification type to the deposit point type(`nfc`,`rfid`,`qr code`)",
    "inputControl":"Optonal:Text, Input control type of the container type. (`chamber`,`weight`,`volume`)",
    "maximumInputVolume":"Optonal:Number, Maximum volume a user can deposit.",
    "features":"Mandatory:List, List of container features.(`wheels`,`handAperture`,`feetAperture`,`lid`,`roundedLid`,`insertHoles`,`lockable`,`accessible holes`)",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "DepositPointIsle": {
    "id":"Mandatory:Text, Unique identifier. Example depositpoint:12a",
    "type":"Mandatory:Text, Entity Type. Fixed to DepositPointIsle",
    "location":"Optonal:Text, Mandatory:GeoJson, Location of the isle represented by a GeoJSON Polygon.",
    "address":"Optonal:Text, Civic address where the isle is located.",
    "name":"Optonal:Text, DepositPointIsle name",
    "description":"Optonal:Text, DepositPointIsle description",
    "features":"Mandatory:Text, list of features provided by the isle (`containerFix`: Allows to fix containers to a permanent position. `fenced`. The isle is properly fenced. `locked`. Locked isle, where a lock needs to be opened for ac-cessing. (Implies being fenced). `underground`. The isle allows to hold buried containers.",
    "refDepositPoint":"Mandatory:List, Reference to DepositPoint entities",
    "areaServed":"Optonal:Text, Higher level area to which the isle belongs to. It can be used to group isles per responsible, district, neighbourhood, etc.",
    "dateModified":"Optonal:Text, Last update timestamp of this entity.",
    "dateCreated":"Optonal:Text, Creation timestamp of the isle (This might different than the entity creation time)",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "Route": {
    "id":"Mandatory:Text, Unique identifier. Example route:1",
    "type":"Mandatory:Text, Entity Type. Fixed to Route",
    "shortName":"Mandatory:Text, Short name of a route, often short and abstract indetifier like 7,34 or Blue that riders use to indetify a route",
    "longName":"Optional:Text, Full name of a route, more descrptive than the short name an often include the route's destination or stop",
    "description":"Optional:Text, Route description",
    "refAssignedVehicle": "Optional:Text, ID of the assigned vehicle",
    "vehicleType": "Mandatory:Text, type of vehcile",
    "departurePoint": "Optonal:Text, Departure location represented by a GeoJSON Point",
    "refDeparture":"Optonal:Text, Segment's departure entity id",
    "scheduledDeparture":"Optional:Text, Itineray's scheduled path geometry represented by a GeoJSON LineString",
    "departureTimestamp":"Optional:Text, Timestamp which captures when the user started the trip segment",
    "arrivalPoint":"Optional:Text, Arrival location represented by a GeoJSON Point",
    "refArrival":"Optional:Text, Segment's arrival entity's id",
    "scheduledArrival":"Optional:Text, Performed path of the vehicle, to be updated while vehicle is traveling. A geometry represented by a GeoJSON Linestring",
    "arrivalTimestamp":"Optional:Text, Timestamp which captures when the user arrival the trip segment",
    "stops":"Mandatory:JSON, Json array with the structured fields of the stops.",
    "refAgency":"Optional:Text, agent this route operated by",
    "color":"Optional:Text, Color that corresponds to the route. The color must be provided as a six-character hexadecimal number, for example, 00FFFF.",
    "url":"Optional:Text, The URL of a web page about that particual route",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "TargetGroup": {
    "id":"Mandatory:Text, Unique identifier. Example targetgroup:3",
    "type":"Mandatory:Text, Entity Type. Fixed to TargetGroup",
    "name":"Text:Mandatory, TargetGroup Name. Example Domestic Generator",
    "acronym":"Text:Mandatory, TargetGroup Acronym Example Domestic Generator",
    "description":"Text:Optional, Target Group description",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"]
  },

  "WasteManagmentStage": {
    "id":"Mandatory:Text, Unique identifier. Example wastemanagmentstage:3",
    "type":"Mandatory:Text, Entity Type. Fixed to WasteManagmentStage",
    "name":"Text:Mandatory, Name of the Waste Management Stage. Example Prevention",
    "Forbiden charachters:": ["<", ">", "'", ";", "(", ")"] 
  }

}
